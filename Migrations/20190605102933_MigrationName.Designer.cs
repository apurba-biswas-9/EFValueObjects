// <auto-generated />
using System;
using EfCoreValueObjects;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EfCoreValueObjects.Migrations
{
    [DbContext(typeof(CompanyContext))]
    [Migration("20190605102933_MigrationName")]
    partial class MigrationName
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EfCoreValueObjects.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("EfCoreValueObjects.Company", b =>
                {
                    b.OwnsMany("EfCoreValueObjects.CompanyAddress", "Addresses", b1 =>
                        {
                            b1.Property<Guid>("CompanyId");

                            b1.Property<string>("City");

                            b1.Property<string>("AddressLine1");

                            b1.HasKey("CompanyId", "City", "AddressLine1");

                            b1.ToTable("CompanyAddress");

                            b1.HasOne("EfCoreValueObjects.Company")
                                .WithMany("Addresses")
                                .HasForeignKey("CompanyId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("EfCoreValueObjects.Domain.StreetAddress", "ShippingAddress", b1 =>
                        {
                            b1.Property<Guid>("CompanyId");

                            b1.Property<string>("City");

                            b1.Property<string>("Street");

                            b1.HasKey("CompanyId");

                            b1.ToTable("Companies");

                            b1.HasOne("EfCoreValueObjects.Company")
                                .WithOne("ShippingAddress")
                                .HasForeignKey("EfCoreValueObjects.Domain.StreetAddress", "CompanyId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
